"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Импортировать пакет psycopg2
# import psycopg2
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'accounts',
    'mc_donalds',
    'news',
    'fpages',
    'simpleapp',
    'django_filters',
    'sign',
    'protect',

    # надо указать не имя нашего приложения, а его конфиг, чтобы всё заработало
    'appointments',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]

SITE_ID = 1

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    # для версий 3.11 django
    'allauth.account.middleware.AccountMiddleware',

    # кэшировать весь сайт целиком # 3 вариант
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # .postgresql / .mysql для MySQL; .oracle для Oracle.
        'NAME': 'news',
        # значение при выполнении команды \list в утилите psql).
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5433',
    },
}

# python manage.py dumpdata --format=json > mydata.json
# python manage.py dumpdata --format=xml > mydata.xml
# python manage.py flush
# python manage.py loaddata mydata.json

# python manage.py dumpdata --format=xml sampleapp > sampledata.xml
# python manage.py flush --sampleapp

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {

    'default': {
        'TIMEOUT': 60,
        # добавляем стандартное время ожидания в минуту (по умолчанию это 5 минут — 300 секунд)
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        # Указываем, куда будем сохранять кэшируемые файлы!
        # Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

LOCALE_PATH = [
    BASE_DIR / 'locale'
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

LOGIN_URL = 'accounts/login/'
# '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
# '/news'
# LOGIN_LOGOUT_REDIRECT_URL = '/accounts/login'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
# 'mandatory'


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / 'static']

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # ваше имя пользователя, например,
# если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то, что идёт до собаки
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это,
# почитайте в дополнительных источниках, но включать его здесь обязательно
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
# если вы используете Яндекс, то не забудьте добавить + ‘@yandex.ru’
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

ADMINS = [
    (os.getenv('admin_name'), os.getenv('admin_email'))
]

SERVER_EMAIL = os.getenv('SERVER_EMAIL')  # это будет у нас вместо аргумента FROM в массовой рассылке

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

MANAGERS = [
    (os.getenv('manager_name'), os.getenv('manager_email'))
]

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
# если задача не выполняется за 25 секунд, то она автоматически снимается,
# можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# news
SITE_URL = 'http://127.0.0.1:8000'

# # Открыть подключение к базе.
# # Обратите внимание на синтаксис строки с информацией о БД:
# # если вы меняли настройки своей БД, то и здесь им придётся
# # указать соответствующие.
# # Кстати, таких подключений можно открывать сколько угодно:
# # вдруг у вашего приложения данные распределены
# # по нескольким базам?
# conn = psycopg2.connect("dbname=postgres user=postgres")
#
# # Создать «курсор» на подключении к базе.
# # Курсоры используются для представления
# # сессий подключения к БД.
# cur = conn.cursor()
#
# # Выполнить команду напрямую.
# cur.execute(
#     "CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);"
# )
#
# # Выполнить команду, не заботясь о корректном синтаксисе
# # представления данных: psycopg2 всё сделает за нас.
# cur.execute(
#     "INSERT INTO test (num, data) VALUES (%s, %s)",
#     (100, "abc'def")
# )
#
# # Выполнить команду
# cur.execute("SELECT * FROM test;")
# # Но как получить результат её выполнения?..
#
# # А вот так. fetchone — «принести» одну строчку результата,
# # fetchall — все строчки.
# cur.fetchone()
#
# # Завершить транзакцию
# conn.commit()
# # Закрыть курсор
# cur.close()
# # Закрыть подключение
# conn.close()

# Стандартную конфигурацию логирования можно переопределить,
# добавляя соответствующие настройки в файл settings.py.
# Рассмотрим пример
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'style' : '{',
#     'formatters': {
#         'simple': {
#             'format': '%(levelname)s %(message)s'
#         },
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'INFO',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple'
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler'
#         }
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['mail_admins'],
#             'level': 'ERROR',
#             'propagate': False,
#         }
#     }
# }
